======== dpkg =============
dpkg - Install, upgrade, remove .deb files BUT does not resove dependencies or locate the package.
# dpkg --get-sellection		==> list installed packages
# dpkg -i <package.deb>		==> install the file from path.
# dpkg -r <package> 	==> remove the package. No path to file needed. Leave the configuration files untouched.
# dpkg -P <package> 	==> Purge the package. Remove the application & configuration files.
# dpkg -S /usr/bin/lp	==> which package command lp belongs to (Source of the file).
# dpkg -s sshd 			==> Status of a package. Also list dependicies. Check whether you have installed a specific package.
# dpkg -L cups-client	==> List all files that belog to an installed
  package. <=> dpkg-query --listfiles apache2 
# dpkg -l 'vim*'		==> list all installed packages available that starts with vim.
==== Debian ususaly will configure a service during the install. Run dpkg-reconfigure to reconfigure the service.
# dpkg-reconfigure	<package-name>

ATTENTION:
- sudo run with a different PATH!
- dpkg does not remove dependencies. apt-get does remove dependencies.

    -L, --listfiles package-name...
        List files installed to your system from package-name.

    -S, --search filename-search-pattern...
        Search for a filename from installed packages.

    -p, --print-avail package-name...
        Display details about package-name, as found in /var/lib/dpkg/available. Users of APT-based frontends should use apt show package-name instead.

List files of a Debian package without install:
# dpkg -c (or --contents) lists the contents of a .deb package file (It is a front-end to dpkg-deb.)
To work directly with package names rather than package files, you can use apt-file. (You may need to install the apt-file package first.)
# sudo apt-file update        
# apt-file list package_name
As stated in the first comment, apt-file lists contents for packages in your already-configured Apt repositories. It is irrelevant whether any particular package is or is not installed.

