VIM tip:
read !ls -l /etc/passwd
Insert the result of the bash command typed after !
TMUX:
Ctrl+b + Alt + left/right move the center bar on windows


#### cut ####

Char 2  - coloana a doua
cut -c 2 /etc/passwd
Start end position - do not use spaces
cut -c 2-7 /etc/passwd
Diplay every character on the line starting with char "4".  Use if we don't know how long the line is
cut -c 4- /etc/passwd  SAU cut -c -4 /etc/passwd  <=> cut -c 1-4 /etc/passwd
cut NU modifica ordinea:
cut -c 1,2,3 /etc/passwd <=> cut -c 3,2,1 /etc/passwd
If range does not match => blank lines 
cut -c 999 /etc/passwd

echo -e     enable interpretation of backslash escapes
\t => TAB
# echo -e 'one\ttwo\tthree\t'
one     two     three

cut -f => display fields
# echo -e 'one\ttwo\tthree\t' | cut -f 1
one

WHAT IF WE HAVE DATA NOT TAB SEPARATED? 
use cat with -d - delimiter
#echo 'one,two,three' | cut -d ',' -f 2
two

This 2 works well:
#echo 'one,two,three' | cut -d, -f 2
#echo 'one,two,three' | cut -d , -f 2
BUT only for characters not interpreted by the shell!! 
This won't work: #echo 'one,two,three' | cut -d \ -f 2 
because shell interpret this \ as a line continuation

BUT this does: echo 'one,two,thee' | cut -d '\' -f 2
ALWAYS PUT -d in quotes: -d '\'


# cut -d ':' -f 1,3 /etc/passwd
root:0
bin:1
To change de default delimiter use --output-delimiter=STRING:
# cut -d ':' -f 1,3 --output-delimiter='@'  /etc/passwd
root@0
bin@1
daemon@2

FILES WITH HEADER:
- create a file with headers:
echo 'John,Smith' >> people.csv
echo 'Niki,Ciurela' >> people.csv
echo 'firstly,mclasty' >> people.csv
echo 'Mr. firstly,mclastly' >> people.csv

We get the header in the output:
# cut -d ',' -f 1 people.csv
first
John
Niki
firstly
Mr. firstly

2 meth: remove the header befor or after sending data to cut

# grep first people.csv
first,last
firstly,mclasty
Mr. firstly,mclastly

BUT we have 3 matches 
# grep 'first,last' people.csv
first,last

USE reg expr:
^ begining of a line match a position and NOT a char 
$ end position of a line 

# grep '^first' people.csv
first,last
firstly,mclasty

All lines ending in t : # grep 't$' people.csv

# grep '^first,last$' people.csv
first,last

INVERSE grep output using "grep -v"
# grep -v '^first,last$' people.csv
John,Smith
firstly,mclasty
Mr. firstly,mclastly

Send this to cut:
grep '^first,last$' people.csv | cut -d ',' -f 1

CUT handle single char delimiter.
Example people.dat
DATA:firstDATA,last
DATA:JohnDATA,Smith
DATA:firstlyDATA,mclasty
DATA:Mr. firstlyDATA,mclastly









































